
from decimal import Decimal
from django.apps import apps
from django.db import models
from django.db.models import Sum
from django.utils import timezone
from django.contrib.auth.models import User
from django.db.models import Q, Count, F
from django.core.exceptions import ValidationError
from django.db.models.functions import Coalesce
from django.db.models import Sum, Value, DecimalField
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType
from django.db.models.signals import post_save
from django.dispatch import receiver
from typing import Optional, List, Dict, Tuple

from app_customer.models import Customer
from app_home.models import Department, Discount, Floor, TestService, TimeFrame, TreatmentPackage, Unit, generate_random_code
from app_product.models import Product, Service, ServiceTreatmentPackage, TechicalSetting
from django.db import transaction

from django.conf import settings

from django.utils.crypto import get_random_string

def unique_code(model, prefix: str, field: str = "code", length: int = 8) -> str:
    """
    Sinh m√£ duy nh·∫•t cho model theo field 'code'.
    V√≠ d·ª•: unique_code(Bill, "BILL_") -> "BILL_AB12CD34"
    """
    while True:
        code = f"{prefix}{get_random_string(length).upper()}"
        if not model.objects.filter(**{field: code}).exists():
            return code

class Booking(models.Model):
    BOOKING_TYPE = [
        ("examination", 'Kh√°m'),
        ("treatment_cure", "Tr·ªã li·ªáu ch·ªØa b·ªánh"),
        ("treatment_relax", "Tr·ªã li·ªáu d∆∞·ª°ng sinh"),
        ("re_examination", 'T√°i kh√°m'),
    ]

    created = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    type = models.CharField(max_length=50, choices=BOOKING_TYPE, default='examination') #khong trueyn
    note = models.TextField(null=True, blank=True)

    has_come = models.BooleanField(default=False) #khong trueyn
    is_treatment = models.BooleanField(blank=False, default=False) #khong trueyn

    receiving_day = models.DateField(null=True, blank=True, verbose_name="Ng√†y ti·∫øp nh·∫≠n")
    #use when customer want to set a date to come
    set_date = models.TimeField(null=True, blank=True, verbose_name="Gi·ªù h·∫πn ƒë·∫øn")
    def __str__(self):
        return f"Booking for {self.customer.name}"
    class Meta:
        app_label = "app_treatment" 

class ExaminationOrder(models.Model):

    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
    doctor_profile = models.ForeignKey('app_hr.HrUserProfile', on_delete=models.SET_NULL, null=True, blank=True)
    diagnosis = models.TextField(null=True, blank=True, verbose_name="Chu·∫©n ƒëo√°n")
    note = models.TextField(null=True, blank=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    start_time = models.DateTimeField(null=True, blank=True)
    end_time = models.DateTimeField(null=True, blank=True)  
    # ti·ªán truy v·∫•n t·ªïng ti·ªÅn
    class Meta:
        app_label = "app_treatment"
        verbose_name = "ƒê∆°n kh√°m"
        verbose_name_plural = "ƒê∆°n kh√°m"
    def __str__(self):
        return f"ƒê∆°n kh√°m #{self.id} - Customer {self.customer_id}"


class ExaminationOrderItem(models.Model):
    """
    M·ªói d√≤ng test trong ƒë∆°n kh√°m (nhi·ªÅu-1 t·ªõi ƒë∆°n kh√°m).
    """
    order = models.ForeignKey(
        ExaminationOrder, on_delete=models.CASCADE, related_name="items"
    )
    test_service = models.ForeignKey(
        TestService, on_delete=models.PROTECT, related_name="order_items"
    )
    quantity = models.PositiveIntegerField(default=1)

    note = models.TextField(null=True, blank=True)
    test_result = models.TextField(null=True, blank=True)
    class Meta:
        app_label = "app_treatment"
        unique_together = ("order", "test_service")  # tr√°nh tr√πng service trong c√πng 1 ƒë∆°n

    def __str__(self):
        return f"{self.test_service.name} (Order {self.order_id})"
class DoctorHealthCheck(models.Model):
    customer = models.OneToOneField(Customer, on_delete=models.CASCADE, related_name="doctor_health_check",null=True, blank=True)
    doctor = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True)

    nearest_examination = models.TextField(null=True, blank=True)
    blood_presure = models.CharField(max_length=20, null=True, blank=True)
    heart_beat = models.CharField(max_length=20, null=True, blank=True)
    height = models.PositiveSmallIntegerField(null=True, blank=True)
    weight = models.PositiveSmallIntegerField(null=True, blank=True)
    breathing_beat = models.PositiveSmallIntegerField(null=True, blank=True)

    class Meta:
        app_label = "app_treatment"
        verbose_name = "B√°c sƒ© kh√°m s·ª©c kh·ªèe"
        verbose_name_plural = "B√°c sƒ© kh√°m s·ª©c kh·ªèe"

class ClinicalExamination(models.Model):
    doctor_health_check_process = models.OneToOneField(DoctorHealthCheck, on_delete=models.CASCADE, related_name="clinical_examination")
    floor = models.ForeignKey(Floor, on_delete=models.SET_NULL, blank=True, null=True)
    department = models.ForeignKey(Department, on_delete=models.SET_NULL, blank=True, null=True)

    medical_history = models.TextField(null=True, blank=True)
    diagnosis = models.TextField(null=True, blank=True)
    present_symptom = models.TextField(null=True, blank=True)
    treatment_method = models.TextField(null=True, blank=True)
    def __str__(self):
        return f"Clinical Examination for {self.doctor_health_check_process.customer.name}"

    class Meta:
        app_label = "app_treatment"
    

class DoctorProcess(models.Model):
    customer = models.ForeignKey(
        Customer, on_delete=models.CASCADE,
        related_name="doctor_process", null=True, blank=True
    )
    doctor_profile = models.ForeignKey('app_hr.HrUserProfile', on_delete=models.SET_NULL, null=True, blank=True)

    # üîó Quan h·ªá cha‚Äìcon (versioning)
    parent = models.ForeignKey(
        "self", on_delete=models.PROTECT,
        null=True, blank=True, related_name="children",
        help_text="B·∫£n g·ªëc m√† b·∫£n n√†y ƒë∆∞·ª£c t·∫°o ra t·ª´."
    )
    version = models.PositiveIntegerField(default=1, help_text="S·ªë version trong ph·∫°m vi 1 kh√°ch h√†ng.")
    is_active = models.BooleanField(default=True, help_text="B·∫£n hi·ªán h√†nh d√πng ƒë·ªÉ t√≠nh ti·ªÅn & hi·ªÉn th·ªã.")
    replace_reason = models.CharField(max_length=255, null=True, blank=True)

    # ƒë∆°n k√™ thu·ªëc
    products = models.ManyToManyField(Product, blank=True, through="diagnosis_medicine")
    medicine_discount = models.ForeignKey(Discount, on_delete=models.SET_NULL, blank=True, null=True)
    medicines_has_paid = models.BooleanField(default=False)

    start_time = models.DateTimeField(null=True, blank=True)
    end_time = models.DateTimeField(null=True, blank=True)

    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)  # ti·ªán audit
    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True)

    class Meta:
        app_label = "app_treatment"
        indexes = [
            models.Index(fields=["customer", "is_active"]),
            models.Index(fields=["customer", "version"]),
        ]
        constraints = [
            # Tu·ª≥ b·∫°n: ƒë·∫£m b·∫£o m·ªói (customer) ch·ªâ c√≥ 1 process active.
            models.UniqueConstraint(
                fields=["customer"],
                condition=models.Q(is_active=True),
                name="uniq_active_process_per_customer",
                violation_error_message="M·ªói kh√°ch h√†ng ch·ªâ c√≥ 1 DoctorProcess ƒëang hi·ªáu l·ª±c."
            )
        ]

    def total_product_amount_after_discount(self) -> Decimal:
        """
        T·ªïng ti·ªÅn ƒë∆°n thu·ªëc = Œ£(price * quantity) c·ªßa c√°c d√≤ng thu·ªëc
        r·ªìi tr·ª´ chi·∫øt kh·∫•u (n·∫øu b·∫°n c√≥ field chi·∫øt kh·∫•u ·ªü DoctorProcess).
        """
        total = (
            self.diagnosis_medicines.aggregate(  # ƒë·ªïi theo related_name c·ªßa b·∫°n
                s=Coalesce(
                    Sum(F('price') * F('quantity'),
                        output_field=DecimalField(max_digits=18, decimal_places=2)),
                    Value(0, output_field=DecimalField(max_digits=18, decimal_places=2))
                )
            )['s'] or Decimal('0.00')
        )

        # (Tu·ª≥ ch·ªçn) N·∫øu b·∫°n c√≥ chi·∫øt kh·∫•u c·∫•p ƒë∆°n thu·ªëc, v√≠ d·ª•:
        disc_type = getattr(self, 'medicine_discount_type', None)   # 'percent' | 'amount' | None
        disc_value = getattr(self, 'medicine_discount_value', None) # s·ªë Decimal/float
        if disc_type and disc_value:
            disc_value = Decimal(str(disc_value))
            if disc_type == 'percent':
                total = total * (Decimal('100') - disc_value) / Decimal('100')
            elif disc_type == 'amount':
                total = max(Decimal('0.00'), total - disc_value)

        return total
    
    def __str__(self):
        return f"DP#{self.id} C{getattr(self.customer,'id',None)} v{self.version} ({'active' if self.is_active else 'archived'})"

    # ====== T·ªïng ti·ªÅn thu·ªëc c·ªßa *b·∫£n n√†y*
    def total_amount(self):
        total = sum(
            (dm.price or 0) * (dm.quantity or 0)
            for dm in self.diagnosis_medicines.all()
        )
        return total

    def total_after_discount(self):
        total = self.total_amount()
        d = getattr(self, "medicine_discount", None)
        if d:
            if d.type in ("percentage", "percent"):
                total = total - (total * d.rate) / 100
            elif d.type in ("fixed", "amount"):  # üëà ch·∫•p nh·∫≠n c·∫£ 'amount'
                total = total - d.rate
        return max(total, 0)

    # ====== Helper: clone/fork m·ªôt process m·ªõi t·ª´ process hi·ªán t·∫°i
    @transaction.atomic
    def fork(self, *, replace_reason: Optional[str] = None) -> "DoctorProcess":
        """
        T·∫°o 1 DoctorProcess m·ªõi t·ª´ b·∫£n hi·ªán t·∫°i:
        - set parent = self
        - tƒÉng version
        - copy to√†n b·ªô diagnosis_medicines (v√† c√°c field ch√≠nh)
        - deactivate b·∫£n c≈© (is_active=False), b·∫£n m·ªõi active=True
        """
        # T√≠nh version m·ªõi trong ph·∫°m vi customer
        last_version = (DoctorProcess.objects
                        .filter(customer=self.customer)
                        .order_by("-version")
                        .values_list("version", flat=True)
                        .first() or 0)
        new_dp = DoctorProcess.objects.create(
            customer=self.customer,
            parent=self,
            version=last_version + 1,
            is_active=True,
            replace_reason=replace_reason,
            medicine_discount=self.medicine_discount,
            medicines_has_paid=False,    # b·∫£n m·ªõi ch∆∞a thanh to√°n
            start_time=timezone.now(),   # tu·ª≥ √Ω: coi nh∆∞ b·∫Øt ƒë·∫ßu m·ªõi
            end_time=None,
        )

        # Copy c√°c d√≤ng thu·ªëc
        bulk_items = []
        for dm in self.diagnosis_medicines.all():
            bulk_items.append(diagnosis_medicine(
                doctor_process=new_dp,
                product=dm.product,
                quantity=dm.quantity,
                unit=dm.unit,
                dose=dm.dose,
                note=dm.note,
                price=dm.price,  # copy gi√° ƒëang d√πng
            ))
        diagnosis_medicine.objects.bulk_create(bulk_items)

        # V√¥ hi·ªáu ho√° b·∫£n c≈©
        if self.is_active:
            self.is_active = False
            self.end_time = timezone.now()
            self.save(update_fields=["is_active", "end_time", "updated_at"])

        return new_dp

    # ====== Manager ti·ªán d·ª•ng
    @classmethod
    def active_for_customer(cls, customer: Customer):
        return cls.objects.filter(customer=customer, is_active=True).order_by("-version").first()

#use only for service path
class diagnosis_medicine(models.Model):
    doctor_process = models.ForeignKey(DoctorProcess, on_delete=models.CASCADE, related_name="diagnosis_medicines")
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True, blank=True)

    quantity = models.PositiveSmallIntegerField(default=1)
    unit = models.ForeignKey(Unit, on_delete=models.SET_NULL, null=True, blank=True)
    dose = models.CharField(max_length=255, null=True, blank=True)
    note = models.TextField(null=True, blank=True)
    price = models.DecimalField(max_digits=25, decimal_places=2, null=True, blank=True)

    def save(self, *args, **kwargs):
        if self.product:
            if not self.unit:
                self.unit = self.product.unit
            if self.price is None:
                self.price = self.product.sell_price
        super().save(*args, **kwargs)

    class Meta:
        app_label = "app_treatment" 

class ServiceAssign(models.Model):
    doctor_process = models.ForeignKey(DoctorProcess, on_delete=models.CASCADE, related_name="service_assign", null=True, blank=True)

    created = models.DateTimeField(auto_now_add=True)
    assigned_expert = models.ForeignKey(User, on_delete=models.CASCADE)
    treatment_method = models.TextField(null=True, blank=True)
    #for purchase service
    services = models.ManyToManyField(Service, blank=True, through="diagnosis_service")
    service_discount = models.ForeignKey(Discount, on_delete=models.SET_NULL, blank=True, null=True)
    services_has_paid = models.BooleanField(default=False)

    def total_amount(self):

        total = Decimal(0)
        for diagnosis in self.diagnosis_services.all():
            service = diagnosis.service
            treatment_package = getattr(diagnosis, "treatment_package", None)

            if service:
                if treatment_package:
                    # L·∫•y gi√° theo g√≥i li·ªáu tr√¨nh
                    try:
                        stp = ServiceTreatmentPackage.objects.get(
                            service=service, treatment_package=treatment_package
                        )
                        total += stp.price * diagnosis.quantity
                    except ServiceTreatmentPackage.DoesNotExist:
                        total += service.price * diagnosis.quantity  # fallback
                else:
                    total += service.price * diagnosis.quantity
        return total

        
    def total_after_discount(self):
        total = self.total_amount()
        if self.service_discount:
            if self.service_discount.type == 'percentage':
                discount_value = (total * self.service_discount.rate) / 100
                return total - discount_value
            elif self.service_discount.type == 'fixed':
                return total - self.service_discount.rate
        return total

    
    class Meta:
        app_label = "app_treatment" 

#use only for service path
class diagnosis_service(models.Model):
    service_assign = models.ForeignKey(ServiceAssign, on_delete=models.CASCADE, related_name="diagnosis_services")
    service = models.ForeignKey(Service, on_delete=models.SET_NULL, null=True, blank=True)
    treatment_package = models.ForeignKey(TreatmentPackage, on_delete=models.SET_NULL, null=True, blank=True)

    quantity = models.PositiveSmallIntegerField(default=1)

    class Meta:
        app_label = "app_treatment" 

from decimal import Decimal

class Bill(models.Model):
    PAID_METHOD = [
        ('cash', 'Ti·ªÅn m·∫∑t'),
        ('transfer', 'Chuy·ªÉn kho·∫£n'),
    ]
    code = models.CharField(max_length=255, unique=True, blank=True)
    created = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)

    # üîÅ ƒê√É S·ª¨A: li√™n k·∫øt tr·ª±c ti·∫øp t·ªõi Customer
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name="bills", null=True, blank=True)

    method = models.CharField(max_length=25, choices=PAID_METHOD, default="cash")
    paid_ammount = models.DecimalField(max_digits=25, decimal_places=2, default=Decimal(0))
    note = models.TextField(null=True, blank=True)

    # ‚ö†Ô∏è T√πy quan ni·ªám: fully_paid theo bill ri√™ng hay theo to√†n kh√°ch h√†ng?
    # ·ªû d∆∞·ªõi m√¨nh s·∫Ω set theo "to√†n kh√°ch h√†ng" nh∆∞ m√¥ t·∫£ c·ªßa b·∫°n.
    fully_paid = models.BooleanField(default=False)

    class Meta:
        app_label = "app_treatment"
    def _ensure_customer(self):
        if not self.customer_id:
            return False
        return True

    # ==============================
    # A. T√çNH THEO BILL HI·ªÜN T·∫†I (gi·ªØ nguy√™n logic c≈©)
    # ==============================
    def _get_active_doctor_process(self):
        try:
            return DoctorProcess.active_for_customer(self.customer)
        except Exception:
            return None

    def _get_service_assigns(self):
        """
        Ch·ªâ l·∫•y c√°c ch·ªâ ƒë·ªãnh d·ªãch v·ª• t·ª´ DoctorProcess ƒëang hi·ªáu l·ª±c.
        """
        dp = self._get_active_doctor_process()
        return list(dp.service_assign.all()) if dp else []

    def get_total_product_amount(self) -> Decimal:
        """
        T·ªïng ti·ªÅn thu·ªëc/s·∫£n ph·∫©m ch·ªâ theo DoctorProcess ƒëang hi·ªáu l·ª±c.
        """
        dp = self._get_active_doctor_process()
        return dp.total_after_discount() if dp else Decimal(0)

    def get_total_service_amount(self) -> Decimal:
        """
        T·ªïng ti·ªÅn *d·ªãch v·ª•* c·ªßa Bill = t·ªïng gi√° *ph√°c ƒë·ªì* g·∫Øn v·ªõi Bill,
        trong ƒë√≥ gi√° c·ªßa m·ªói ph√°c ƒë·ªì = package_price() (∆∞u ti√™n ServiceTreatmentPackage).
        KH√îNG c·ªông ti·ªÅn k·ªπ thu·∫≠t (techical_setting) ‚Äì ch·ªâ d√πng cho payroll.
        """
        total = Decimal(0)
        # D√πng related_name="treatment_requests" t·ª´ FK ·ªü TreatmentRequest
        for tr in self.treatment_requests.all():
            total += tr.package_price()
        return total

    def get_doctor(self):
        """
        N·∫øu b·∫°n mu·ªën show b√°c sƒ© g·∫Øn v·ªõi process hi·ªán h√†nh:
        - N·∫øu l∆∞u ·ªü DoctorHealthCheck: return self.customer.doctor_health_check.doctor
        - N·∫øu b·∫°n c√≥ field b√°c sƒ© ngay tr√™n DoctorProcess, l·∫•y t·ª´ dp active.
        """
        # V√≠ d·ª• l·∫•y theo DoctorHealthCheck:
        try:
            return self.customer.doctor_health_check.doctor
        except Exception:
            pass

        # Ho·∫∑c n·∫øu c√≥ field tr√™n DoctorProcess:
        dp = self._get_active_doctor_process()
        return getattr(dp, "assigned_doctor", None) if dp else None

    def get_total_service_amount(self) -> Decimal:
        total = Decimal(0)
        for assign in self._get_service_assigns():
            total += assign.total_after_discount()
        return total


    def get_total_amount(self) -> Decimal:
        """
        T·ªïng ti·ªÅn c·ªßa BILL HI·ªÜN T·∫†I (d·ªãch v·ª• + s·∫£n ph·∫©m).
        """
        return self.get_total_service_amount() + self.get_total_product_amount()

    def get_total_amount_real(self) -> Decimal:
        return self.get_total_amount()

    def bill_amount_remaining(self) -> Decimal:
        """
        S·ªë ti·ªÅn c√≤n l·∫°i c·ªßa RI√äNG bill n√†y = total (bill) - paid_ammount (c·ªßa bill).
        (Gi·ªØ l·∫°i n·∫øu b·∫°n v·∫´n mu·ªën theo d√µi ·ªü c·∫•p bill).
        """
        remaining = self.get_total_amount_real() - self.paid_ammount
        return remaining if remaining > 0 else Decimal(0)

    # ==============================
    # B. T√çNH THEO TO√ÄN B·ªò KH√ÅCH H√ÄNG (theo y√™u c·∫ßu m·ªõi)
    # ==============================
    def get_customer_total_billed(self) -> Decimal:
        """
        T·ªïng s·ªë ti·ªÅn ƒë√£ xu·∫•t h√≥a ƒë∆°n cho KH√ÅCH H√ÄNG = sum(total c·ªßa T·∫§T C·∫¢ bill c·ªßa kh√°ch h√†ng).
        V√¨ total l√† h√†m Python (kh√¥ng l∆∞u trong DB), ta c·ªông b·∫±ng Python.
        """
        total = Decimal(0)
        # Tr√°nh N+1 ·ªü ph·∫ßn doctor_process n·∫øu c·∫ßn, nh∆∞ng ·ªü ƒë√¢y kh√≥ prefetch v√¨ total l√† h√†m tu·ª≥ logic.
        for b in Bill.objects.filter(customer=self.customer).iterator():
            total += b.get_total_amount_real()
        return total

    def get_customer_total_paid(self) -> Decimal:
        """
        T·ªïng s·ªë ti·ªÅn KH√ÅCH H√ÄNG ƒë√£ thanh to√°n = sum(paid_ammount c·ªßa t·∫•t c·∫£ bill).
        """
        agg = Bill.objects.filter(customer=self.customer).aggregate(s=Sum('paid_ammount'))
        return agg['s'] or Decimal(0)

    def amount_remaining(self) -> Decimal:
        """
        ‚ö†Ô∏è ƒê√É S·ª¨A: Tr·∫£ v·ªÅ "s·ªë ti·ªÅn C√íN N·ª¢ c·ªßa KH√ÅCH H√ÄNG" (kh√¥ng ph·∫£i ri√™ng bill n√†y).
        = T·ªïng ti·ªÅn t·∫•t c·∫£ h√≥a ƒë∆°n - T·ªïng ƒë√£ thanh to√°n t·∫•t c·∫£ h√≥a ƒë∆°n.
        V√≠ d·ª• c·ªßa b·∫°n: 1.000.000 - 200.000 = 800.000.
        """
        remaining = self.get_customer_total_billed() - self.get_customer_total_paid()
        return remaining if remaining > 0 else Decimal(0)

    def get_product_fee_remaining(self) -> Decimal:
        """
        (Tu·ª≥ b·∫°n c√≥ c√≤n c·∫ßn c√°c h√†m 'remaining' t√°ch ri√™ng kh√¥ng)
        ·ªû c·∫•p 'kh√°ch h√†ng', n·∫øu v·∫´n mu·ªën gi·ªØ API c≈©:
        - C√≥ th·ªÉ ƒë·ªÉ = t·ªïng product fee c·ªßa bill hi·ªán t·∫°i (nh∆∞ c≈©)
        - Ho·∫∑c s·ª≠a th√†nh t·ªïng product fee (m·ªçi bill). ·ªû ƒë√¢y m√¨nh gi·ªØ theo BILL hi·ªán t·∫°i.
        """
        return self.get_total_product_amount()

    def get_service_fee_remaining(self) -> Decimal:
        # Gi·ªØ theo BILL hi·ªán t·∫°i (nh∆∞ c≈©). N·∫øu mu·ªën chuy·ªÉn sang t·ªïng-cho-kh√°ch, c·∫ßn c√≥ c√°ch t√≠nh product/service t√°ch r·ªùi ·ªü nhi·ªÅu bill.
        return self.get_total_service_amount()

    # ==============================
    # C. NH√ÇN S·ª∞
    # ==============================
    # ==============================
    # D. LIFE CYCLE
    # ==============================
    # --- LI√äN QUAN ƒê·∫æN SESSION ---
    def get_treatment_sessions_remaining(self) -> int:
        """
        S·ªë bu·ªïi tr·ªã li·ªáu CH∆ØA ho√†n th√†nh c·ªßa t·∫•t c·∫£ TreatmentRequest thu·ªôc bill n√†y.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            is_done=False
        ).count()

    def get_treatment_sessions_done(self) -> int:
        """
        S·ªë bu·ªïi tr·ªã li·ªáu ƒê√É ho√†n th√†nh c·ªßa t·∫•t c·∫£ TreatmentRequest thu·ªôc bill n√†y.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            is_done=True
        ).count()

    def get_uncompleted_sessions_for_tlcb_service(self) -> int:
        """
        S·ªë bu·ªïi CH∆ØA ho√†n th√†nh cho c√°c ph√°c ƒë·ªì c√≥ service.type = 'TLCB'.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            treatment_request__service__type='TLCB',
            is_done=False
        ).count()

    def get_completed_sessions_for_tlcb_service(self) -> int:
        """
        S·ªë bu·ªïi ƒê√É ho√†n th√†nh cho c√°c ph√°c ƒë·ªì c√≥ service.type = 'TLCB'.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            treatment_request__service__type='TLCB',
            is_done=True
        ).count()

    def get_uncompleted_sessions_for_tlds_service(self) -> int:
        """
        S·ªë bu·ªïi CH∆ØA ho√†n th√†nh cho c√°c ph√°c ƒë·ªì c√≥ service.type = 'TLDS'.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            treatment_request__service__type='TLDS',
            is_done=False
        ).count()

    def get_completed_sessions_for_tlds_service(self) -> int:
        """
        S·ªë bu·ªïi ƒê√É ho√†n th√†nh cho c√°c ph√°c ƒë·ªì c√≥ service.type = 'TLDS'.
        """
        return TreatmentSession.objects.filter(
            treatment_request__bill=self,
            treatment_request__service__type='TLDS',
            is_done=True
        ).count()

    def clean(self):
        """
        ‚ö†Ô∏è ƒê√É ƒê·ªîI NG·ªÆ NGHƒ®A: fully_paid = KH√ÅCH H√ÄNG kh√¥ng c√≤n n·ª£ (t·ªïng m·ªçi bill ƒë√£ ƒë∆∞·ª£c thanh to√°n h·∫øt).
        N·∫øu b·∫°n mu·ªën 'fully_paid' ch·ªâ ph·∫£n √°nh RI√äNG bill n√†y, ƒë·ªïi l·∫°i v·ªÅ: self.bill_amount_remaining() <= 0
        """
        self.fully_paid = self.amount_remaining() <= Decimal(0)

    def save(self, *args, **kwargs):
        self.clean()
        if not self.code:
            while True:
                new_code = f"BILL_{generate_random_code()}"
                if not Bill.objects.filter(code=new_code).exists():
                    self.code = new_code
                    break
        super().save(*args, **kwargs)
        
class PaymentHistory(models.Model):
    """
    M·ªói PaymentHistory = 1 ƒë·ª£t thanh to√°n.
    Sau khi l∆∞u, h·ªá th·ªëng ph√¢n b·ªï ti·ªÅn v√†o c√°c ARItem (c√¥ng n·ª£) v√† t·∫°o Bill cho ƒë·ª£t thanh to√°n n√†y.
    """
    bill = models.ForeignKey('app_treatment.Bill', related_name='payments',
                             on_delete=models.CASCADE, null=True, blank=True)
    ar_item = models.ForeignKey('ARItem', on_delete=models.CASCADE, related_name='payment_histories', null=True, blank=True) 
    
    # ‚¨áÔ∏è KH√îNG c√≤n cho null/blank
    customer = models.ForeignKey('app_customer.Customer', on_delete=models.CASCADE,
                                 related_name='payments')
    paid_amount = models.DecimalField(max_digits=25, decimal_places=2)
    paid_method = models.CharField(max_length=25, choices=Bill.PAID_METHOD)
    code = models.CharField(max_length=255, unique=True, null=True, blank=True)
    user = models.ForeignKey('auth.User', on_delete=models.SET_NULL, null=True, blank=True)
    created = models.DateTimeField(auto_now_add=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['bill'], name='uniq_one_payment_per_bill'),
        ]

    def clean(self):
        if self.ar_item and self.customer_id and self.ar_item.customer_id != self.customer_id:
            raise ValidationError("Customer c·ªßa Payment ph·∫£i tr√πng v·ªõi Customer c·ªßa ARItem.")

    def __str__(self):
        return f"Payment {self.code or ''} {self.paid_amount} for AR#{self.ar_item_id}"

    def _gen_code(self, prefix: str = "PH_") -> str:
        return unique_code(PaymentHistory, prefix)

    @transaction.atomic
    def save(self, *args, **kwargs):
        is_create = self._state.adding
        if not is_create:
            raise ValidationError("Kh√¥ng cho ph√©p s·ª≠a PaymentHistory; h√£y t·∫°o b√∫t to√°n ƒëi·ªÅu ch·ªânh.")

        if self.paid_amount is None or self.paid_amount <= Decimal(0):
            raise ValidationError("paid_amount must be > 0")

        if not self.code:
            self.code = self._gen_code()

        # Chu·∫©n ho√° customer theo ARItem cho ch·∫Øc ch·∫Øn
        if self.ar_item and self.customer_id != self.ar_item.customer_id:
            self.customer_id = self.ar_item.customer_id

        # L∆∞u ƒë·ªÉ c√≥ self.id
        super().save(*args, **kwargs)

        # C·∫≠p nh·∫≠t DUY NH·∫§T ARItem n√†y
        ARItem = apps.get_model('app_treatment', 'ARItem')
        ar = ARItem.objects.select_for_update().get(id=self.ar_item_id)

        # Kh√¥ng cho thanh to√°n v∆∞·ª£t qu√° d∆∞ n·ª£
        remaining = (ar.amount_original or Decimal('0')) - (ar.amount_paid or Decimal('0'))
        if self.paid_amount > remaining:
            raise ValidationError("S·ªë ti·ªÅn thanh to√°n v∆∞·ª£t qu√° d∆∞ n·ª£ c·ªßa phi·∫øu c√¥ng n·ª£.")

        ar.amount_paid = (ar.amount_paid or Decimal('0')) + self.paid_amount
        ar.status = 'closed' if ar.amount_paid >= ar.amount_original else 'partial'
        ar.save(update_fields=['amount_paid', 'status'])

        # Bill cho ƒê·ª¢T THU (n·∫øu c√≤n d√πng Bill)
        if not self.bill_id:
            bill = Bill.objects.create(
                customer=self.customer,
                paid_ammount=self.paid_amount,   # s·ªë ti·ªÅn c·ªßa ƒë·ª£t n√†y
            )
            if not getattr(bill, 'code', None):
                bill.code = unique_code(Bill, "BILL_")
                bill.save(update_fields=['code'])
            self.bill = bill
            super().save(update_fields=['bill'])
        else:
            self.bill.paid_ammount = self.paid_amount
            self.bill.save(update_fields=['paid_ammount'])

    def delete(self, *args, **kwargs):
        raise ValidationError("Kh√¥ng cho xo√° PaymentHistory; h√£y t·∫°o b√∫t to√°n ƒëi·ªÅu ch·ªânh.")
    
class TreatmentRequest(models.Model):

    bill = models.ForeignKey(Bill, on_delete=models.CASCADE, related_name="treatment_requests", null=True, blank=True)
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='treatment_requests')
    code = models.CharField(max_length=20, unique=True,blank=True)
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    selected_package_id = models.IntegerField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    is_done = models.BooleanField(default=False)
    
    note = models.TextField(null=True,blank=True,verbose_name="Ghi ch√∫")
    
    doctor_profile = models.ForeignKey(
        'app_hr.HrUserProfile',
        on_delete=models.SET_NULL,
        null=True, blank=True,
        related_name='treatment_requests',
        db_index=True,
        verbose_name="B√°c sƒ© (HR)"
    )
    
    discount = models.ForeignKey(
        'app_home.Discount', 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='treatment_requests',
        verbose_name="M√£ gi·∫£m gi√°"
    )
    
    diagnosis = models.TextField(null=True, blank=True, verbose_name="Ch·∫©n ƒëo√°n")
    treatment_package = models.ForeignKey(
        TreatmentPackage, on_delete=models.SET_NULL,
        null=True, blank=True, related_name='treatment_requests', verbose_name="G√≥i li·ªáu tr√¨nh"
    )
    
    def package_price_original(self) -> Decimal:
        """Gi√° g·ªëc (kh√¥ng gi·∫£m)"""
        if self.service_id:
            if self.treatment_package_id:
                stp = ServiceTreatmentPackage.objects.filter(
                    service=self.service,
                    treatment_package=self.treatment_package
                ).first()
                if stp and getattr(stp, "price", None) is not None:
                    return stp.price
            return getattr(self.service, "price", Decimal(0)) or Decimal(0)
        return Decimal(0)
    
    def package_price(self) -> Decimal:
        """Gi√° sau khi √°p d·ª•ng discount"""
        original = self.package_price_original()
        
        if not self.discount:
            return original
        
        if self.discount.type in ('percentage', 'percent'):
            discount_amount = (original * self.discount.rate) / Decimal('100')
            return original - discount_amount
        elif self.discount.type in ('fixed', 'amount'):
            return max(Decimal('0'), original - self.discount.rate)
        
        return original
    
    def recalc_ar(self):
        """
        ƒê·ªìng b·ªô c√¥ng n·ª£ (ARItem) theo gi√° sau khuy·∫øn m√£i.
        - N·∫øu c√≥ ARItem: update amount_original + status.
        - N·∫øu ch∆∞a c√≥ v√† amount > 0: t·∫°o m·ªõi.
        - N·∫øu amount = 0: xo√° ARItem (n·∫øu ch∆∞a ph√°t sinh thanh to√°n).
        """

        amount = self.package_price() or Decimal('0')
        ct = ContentType.objects.get_for_model(TreatmentRequest)

        qs = ARItem.objects.select_for_update().filter(
            content_type=ct, object_id=self.id
        )

        if amount > 0:
            if qs.exists():
                ar = qs.first()
                paid = ar.amount_paid or Decimal('0')
                ar.amount_original = amount
                # set tr·∫°ng th√°i theo s·ªë ƒë√£ thanh to√°n
                if paid >= amount:
                    ar.status = 'closed'
                elif paid > 0:
                    ar.status = 'partial'
                else:
                    ar.status = 'open'
                ar.save(update_fields=['amount_original', 'status'])
            else:
                # c·∫ßn c√≥ customer ƒë·ªÉ g√°n c√¥ng n·ª£
                customer = getattr(self, 'customer', None)
                if customer is None:
                    # n·∫øu project l∆∞u customer ·ªü booking, c√≥ th·ªÉ l·∫•y nh∆∞ b·∫°n ƒëang l√†m:
                    any_sess = self.treatment_sessions.select_related('booking__customer').first()
                    customer = getattr(getattr(any_sess, 'booking', None), 'customer', None)

                ARItem.objects.create(
                    customer=customer,
                    content_type=ct,
                    object_id=self.id,
                    description=f'Ph√°c ƒë·ªì: {getattr(self.service, "name", "")}',
                    amount_original=amount,
                    status='open',
                )
        else:
            # amount == 0 ‚Üí c√≥ th·ªÉ xo√° n·∫øu ch∆∞a ph√°t sinh thanh to√°n
            if qs.exists():
                ar = qs.first()
                if (ar.amount_paid or Decimal('0')) == 0:
                    qs.delete()
                else:
                    # n·∫øu ƒë√£ c√≥ thanh to√°n > 0 m√† amount=0, tu·ª≥ policy d·ª± √°n:
                    #  - ƒë√°nh d·∫•u closed + t·∫°o b√∫t to√°n ƒëi·ªÅu ch·ªânh ho√†n ti·ªÅn
                    #  - ho·∫∑c log c·∫£nh b√°o
                    ar.status = 'closed'
                    ar.save(update_fields=['status'])

    def compute_is_done(self) -> bool:
        """
        Ph√°c ƒë·ªì coi l√† HO√ÄN TH√ÄNH khi:
        - C√≥ √≠t nh·∫•t 1 k·ªπ thu·∫≠t thu·ªôc b·∫•t k·ª≥ bu·ªïi n√†o
        - V√† *kh√¥ng c√≤n* k·ªπ thu·∫≠t n√†o has_come=False
        """
        qs = SessionTechicalSetting.objects.filter(session__treatment_request=self)
        return qs.exists() and not qs.filter(has_come=False).exists()

    def refresh_done_status(self, commit: bool = True) -> bool:
        new_val = self.compute_is_done()
        if self.is_done != new_val:
            self.is_done = new_val
            if commit:
                self.save(update_fields=["is_done"])
        return self.is_done

    def __str__(self):
        return f"{self.code}"
    def save(self, *args, **kwargs):
        self.clean()
        if not self.code:
            while True:
                new_code = f"TR_{generate_random_code()}"
                if not TreatmentRequest.objects.filter(code=new_code).exists():
                    self.code = new_code
                    break
        super().save(*args, **kwargs)
    def get_total_price_is_done_treatment_sessions(self):

        total = (
            SessionTechicalSetting.objects
            .filter(session__treatment_request=self, has_come=True)
            .aggregate(total=Coalesce(Sum('techical_setting__price'),
                                    Value(0, output_field=DecimalField(max_digits=18, decimal_places=2))))
        )['total']
        return total

    def get_treatment_sessions_summary(self):
        summary = self.treatment_sessions.aggregate(
            remaining=Count('id', filter=Q(is_done=False)),
            done=Count('id', filter=Q(is_done=True))
        )
        return summary
    
@receiver(post_save, sender=TreatmentRequest)
def create_ar_on_treatment_created(sender, instance: 'TreatmentRequest', created, **kwargs):
    if not created:
        return
    if not instance.customer_id:
        return
    
    amount = instance.package_price() or Decimal('0.00')
    if amount <= 0:
        return
    
    ARItem.objects.create(
        customer=instance.customer,
        content_type=ContentType.objects.get_for_model(sender),
        object_id=instance.id,
        description=f'Ph√°c ƒë·ªì: {getattr(instance.service, "name", "")}',
        amount_original=amount,
    )

class TreatmentSession(models.Model):
    treatment_request = models.ForeignKey(TreatmentRequest,on_delete=models.CASCADE,verbose_name="Y√™u c·∫ßu tr·ªã li·ªáu",related_name="treatment_sessions")
    floor = models.ForeignKey(Floor,on_delete=models.SET_NULL,null=True,blank=True,verbose_name="T·∫ßng")
    note = models.TextField(null=True,blank=True,verbose_name="Ghi ch√∫")
    content = models.TextField(null=True,blank=True)
    is_done = models.BooleanField(default=False, editable=False)
    designated_experts = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True, related_name="treatment_session")
    
    index_no = models.PositiveIntegerField(default=1, db_index=True, verbose_name="S·ªë th·ª© t·ª± bu·ªïi")
    booking = models.OneToOneField(Booking, on_delete=models.SET_NULL,
                                   null=True, blank=True, verbose_name="L·ªãch h·∫πn")
    
    def compute_is_done(self) -> bool:
        """
        Bu·ªïi coi l√† HO√ÄN TH√ÄNH khi:
        - C√≥ √≠t nh·∫•t 1 item k·ªπ thu·∫≠t, v√†
        - Kh√¥ng c√≤n item n√†o has_come=False
        """
        qs = self.sessiontechicalsetting_set
        return qs.exists() and not qs.filter(has_come=False).exists()

    def refresh_done_status(self, commit: bool = True) -> bool:
        """T√≠nh l·∫°i is_done theo c√°c k·ªπ thu·∫≠t c·ªßa *bu·ªïi*, r·ªìi ƒë·ªìng b·ªô DB."""
        new_val = self.compute_is_done()
        changed = (self.is_done != new_val)
        if changed:
            self.is_done = new_val
            if commit:
                self.save(update_fields=["is_done"])
        # üîÅ Lu√¥n ƒë·ªìng b·ªô tr·∫°ng th√°i ph√°c ƒë·ªì ‚Äúcha‚Äù
        if self.treatment_request_id:
            self.treatment_request.refresh_done_status(commit=True)
        return self.is_done

    @property
    def is_completed(self) -> bool:
        """Property ch·ªâ-ƒë·ªçc, lu√¥n t√≠nh theo item hi·ªán t·∫°i (kh√¥ng ph·ª• thu·ªôc DB field)."""
        return self.compute_is_done()

    def get_designated_experts(self):
        try:
            return ', '.join([expert.get_full_name() for expert in self.designated_experts.all()])
        except AttributeError:
            return None

    def __str__(self):
        return f"Session #{self.id} ({self.sessiontechicalsetting_set.count()} k·ªπ thu·∫≠t)"

class SessionTechicalSetting(models.Model):
    
    session = models.ForeignKey(TreatmentSession, on_delete=models.CASCADE, verbose_name="Bu·ªïi tr·ªã li·ªáu")
    techical_setting = models.ForeignKey(TechicalSetting, on_delete=models.CASCADE, verbose_name="K·ªπ thu·∫≠t th·ª±c hi·ªán")
    expert = models.ForeignKey(
        'app_hr.HrUserProfile', null=True, blank=True,
        on_delete=models.SET_NULL, related_name='session_tech_settings'
    )

    duration_minutes = models.PositiveIntegerField(default=10, verbose_name="Th·ªùi gian (ph√∫t)")
    room = models.CharField(max_length=100, null=True, blank=True, verbose_name="Ph√≤ng")
    has_come = models.BooleanField(default=False, db_index=True, verbose_name="Tr·∫°ng th√°i")
    
    def clean(self):
        # ƒë·∫£m b·∫£o ch·ªâ ch·ªçn CTV
        if self.expert and self.expert.type != 'collaborator':
            raise ValidationError("expert must be a collaborator (CTV).")

    def calculate_expert_payment(self):
        # V·ªõi FK expert (1 ng∆∞·ªùi/1 k·ªπ thu·∫≠t), full price cho ng∆∞·ªùi ƒë√≥:
        return self.techical_setting.price if self.expert_id else 0

    def calculate_expert_time(self):
        # N·∫øu c·∫ßn ‚Äút·ª∑ l·ªá‚Äù th·ªùi gian khi c√≥ nhi·ªÅu chuy√™n gia,
        # th√¨ ph·∫£i chuy·ªÉn sang M2M. C√≤n FK th√¨ tr·∫£ 1.0
        return 1.0 if self.expert_id else 0.0
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        # b·∫•t k·ª≥ thay ƒë·ªïi n√†o ·ªü item c≈©ng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn is_done
        self.session.refresh_done_status(commit=True)

    def delete(self, *args, **kwargs):
        session = self.session
        super().delete(*args, **kwargs)
        session.refresh_done_status(commit=True)
    
    def __str__(self):
        return f"{self.session} - {self.techical_setting}"


class ReExamination(models.Model):
    REEXAMINATION_STATUS = [
        ('pending', 'Ch·ªù t√°i kh√°m'),
        ('completed', 'ƒê√£ t√°i kh√°m'),
    ]

    status = models.CharField(max_length=20, choices=REEXAMINATION_STATUS, default='pending')
    bill = models.ForeignKey(Bill,on_delete=models.SET_NULL,null=True)
    appointment_date = models.DateField(null=True, blank=True, verbose_name="Ng√†y h·∫πn t√°i kh√°m")
    doctor_evaluation = models.TextField(null=True, blank=True, verbose_name="ƒê√°nh gi√° c·ªßa b√°c sƒ©")
    recommendation = models.TextField(null=True, blank=True, verbose_name="L·ªùi khuy√™n")

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"T√°i kh√°m {self.id} - Booking {self.booking.id} - {self.get_status_display()}"

class ExpertSessionRecord(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    treatment_request = models.ForeignKey(TreatmentRequest, on_delete=models.CASCADE,null=True,blank=True)
    techical_setting = models.ForeignKey(TechicalSetting, on_delete=models.CASCADE)

    class Meta:
        unique_together = ('user', 'treatment_request', 'techical_setting')
        
class ARItem(models.Model):
    """
    M·ªôt m·ª•c c√¥ng n·ª£ ph√°t sinh khi t·∫°o:
    - Ph√°c ƒë·ªì (TreatmentRequest): amount_original = package_price()
    - ƒê∆°n thu·ªëc (DoctorProcess): amount_original = total_product_amount_after_discount()
    C√≥ th·ªÉ thanh to√°n nhi·ªÅu ƒë·ª£t (partial).
    """
    created = models.DateTimeField(default=timezone.now)
    customer = models.ForeignKey('app_customer.Customer', on_delete=models.CASCADE, related_name='ar_items')

    # Li√™n k·∫øt t·ªõi ngu·ªìn ph√°t sinh c√¥ng n·ª£ (TR/DoctorProcess)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    source = GenericForeignKey('content_type', 'object_id')

    description = models.CharField(max_length=255, blank=True, default='')
    amount_original = models.DecimalField(max_digits=14, decimal_places=2, default=Decimal('0.00'))
    amount_paid = models.DecimalField(max_digits=14, decimal_places=2, default=Decimal('0.00'))

    STATUS = (('open', 'Open'), ('partial', 'Partial'), ('closed', 'Closed'))
    status = models.CharField(max_length=10, choices=STATUS, default='open')

    class Meta:
        indexes = [models.Index(fields=['customer', 'status'])]

    @property
    def amount_remaining(self) -> Decimal:
        return max(Decimal('0.00'), (self.amount_original or 0) - (self.amount_paid or 0))

    def apply_payment(self, pay_amount: Decimal) -> Decimal:
        """
        C·∫•n tr·ª´ 1 kho·∫£n thanh to√°n v√†o c√¥ng n·ª£ n√†y. Tr·∫£ v·ªÅ s·ªë ti·ªÅn c√≤n d∆∞ ch∆∞a c·∫•n.
        """
        if pay_amount <= 0:
            return Decimal('0.00')
        can_apply = min(pay_amount, self.amount_remaining)
        self.amount_paid = (self.amount_paid or Decimal('0.00')) + can_apply
        # c·∫≠p nh·∫≠t tr·∫°ng th√°i
        remaining_after = (self.amount_original or Decimal('0.00')) - self.amount_paid
        if remaining_after <= 0:
            self.status = 'closed'
        elif self.amount_paid > 0:
            self.status = 'partial'
        else:
            self.status = 'open'
        self.save(update_fields=['amount_paid', 'status'])
        return pay_amount - can_apply
